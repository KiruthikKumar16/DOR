// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  email           String    @unique
  name            String?
  password        String?
  image           String?
  emailVerified   DateTime?
  resetToken      String?   @unique
  resetTokenExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  profile         Profile?
  wardrobeItems   WardrobeItem[]
  outfits         Outfit[]
  ratings         OutfitRating[]
  accounts        Account[]
  sessions        Session[]
}

model Profile {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Basic Info
  gender    String?
  age       Int?
  height    Int?     // in cm
  weight    Int?     // in kg
  bodyType  String?
  style     String?
  
  // Preferences stored as JSON
  preferences Json?
}

model WardrobeItem {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  type        String   // e.g., "top", "bottom", "shoes"
  category    String   // e.g., "casual", "formal", "sports"
  weather     String[] // e.g., ["summer", "winter"]
  occasions   String[] // e.g., ["casual", "formal"]
  imageUrl    String?
  brand       String?
  color       String?
  size        String?
  season      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  outfits     Outfit[]
}

model Outfit {
  id            String    @id @default(cuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  name          String // Outfit name is required

  // Fields from recommendation
  destination   String?
  date          DateTime?
  occasion      String?
  vibe          String?
  weather       String?   @db.Text // Store weather as JSON string
  outfit        String?   @db.Text // Store outfit structure as JSON string
  imageUrl      String?
  culturalNotes String?   @db.Text // Store cultural notes as text

  isPublic      Boolean   @default(false)
  shareUrl      String?   @unique // Optional share URL

  // Add the missing relation fields
  items         WardrobeItem[]
  ratings       OutfitRating[]
}

model OutfitRating {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  outfitId  String
  outfit    Outfit   @relation(fields: [outfitId], references: [id])
  rating    Int      @default(0)
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, outfitId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 